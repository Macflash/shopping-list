{"version":3,"sources":["components/flexrow.tsx","models/items.ts","components/itemPicker.tsx","components/headerrow.tsx","components/categorylist.tsx","components/actionlist.tsx","components/shoppinglist.tsx","components/menubar.tsx","components/fridgelist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FlexRow","props","react_default","a","createElement","style","Object","objectSpread","display","alignItems","column","undefined","padding","flexDirection","flex","fill","children","GetItem","fullName","Items","find","item","name","category","expirationLenth","unopenedExpirationLength","ItemPicker","TagPicker","searchingText","styles","onValidateInput","input","Fabric","valid","onResolveSuggestions","filter","partialName","items","toLowerCase","includes","i","hiddenItems","some","hiddenName","map","key","length","concat","onItemSelected","selectedItem","definedItem","onAddItem","HeaderRow","flexrow_FlexRow","fontWeight","fontSize","text","CategoryList","_React$Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","_this","sortedItems","sort","b","aCat","bCat","lastCat","console","log","forEach","index","push","headerrow_HeaderRow","renderItem","overflowY","React","Component","ActionList","Fragment","list","paddingBottom","actions","ShoppingList","actionlist_ActionList","categorylist_CategoryList","shoppingList","Checkbox","label","checked","purchased","onChange","ev","newList","toConsumableArray","setShoppingList","PurchaseItem","IconButton","marginLeft","iconProps","iconName","onClick","splice","DeleteItem","justifyContent","itemPicker_ItemPicker","root","minWidth","width","margin","s","DefaultButton","marginRight","onComplete","disabled","MenuBar","_React$useState","useState","_React$useState2","slicedToArray","open","setOpen","borderBottom","menuItems","ActionButton","icon","setView","FridgeList","Date","date","setDate","fridgeList","color","fontStyle","expires","toLocaleDateString","weekday","day","month","setFridgeList","getDate","status","DatePicker","onSelectDate","newDate","savedView","localStorage","getItem","savedShoppingList","savedFridgeList","App","view","_React$useState3","JSON","parse","_React$useState4","_React$useState5","_React$useState6","setItem","stringify","content","shoppinglist_ShoppingList","shoppingItem","def","expirationLength","fridgelist_FridgeList","height","position","menubar_MenuBar","Boolean","window","location","hostname","match","initializeIcons","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37ebe1ba.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\n\r\nexport const FlexRow: React.FC<{ fill?: boolean, column?: boolean, style?: any }> = props => {\r\n    return (\r\n        <div style={{\r\n            display: \"flex\",\r\n            alignItems: props.column ? undefined : \"center\",\r\n            padding: props.column ? undefined : \"10px\",\r\n            flexDirection: props.column ? \"column\" : \"row\",\r\n            flex: props.fill ? \"auto\" : \"none\",\r\n            ...props.style\r\n        }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}","import { IItemDefinition } from \"./models\";\r\n\r\nexport const LookupItems = (partialName: string): IItemDefinition[] => Items.filter(item => item.name.toLowerCase().includes(partialName.toLowerCase()));\r\n\r\nexport const GetItem = (fullName: string): IItemDefinition | undefined => Items.find(item => item.name == fullName);\r\n\r\nexport type Category =\r\n    \"Other\" |\r\n    \"Fruit\" |\r\n    \"Vegetable\" |\r\n    \"Meat\" |\r\n    \"Dairy\" |\r\n    \"Grain\" |\r\n    \"Canned\" |\r\n    \"Frozen\";\r\n\r\nexport const Items: IItemDefinition[] = [\r\n    {\r\n        name: \"Broccoli\",\r\n        category: \"Vegetable\",\r\n        expirationLenth: 6,\r\n    },\r\n    {\r\n        name: \"Lettuce\",\r\n        category: \"Vegetable\",\r\n        expirationLenth: 5\r\n    },\r\n    {\r\n        name: \"Carrots\",\r\n        category: \"Vegetable\",\r\n        expirationLenth: 21,\r\n    },\r\n    {\r\n        name: \"Yogurt\",\r\n        category: \"Dairy\",\r\n        expirationLenth: 7,\r\n        unopenedExpirationLength: 21,\r\n    },\r\n    {\r\n        name: \"Greek Yogurt\",\r\n        category: \"Dairy\",\r\n        expirationLenth: 7,\r\n        unopenedExpirationLength: 21,\r\n    },\r\n];","import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\nimport { LookupItems, GetItem } from '../models/items';\r\nimport { IItemDefinition } from '../models/models';\r\n\r\nexport const ItemPicker: React.FC<{\r\n    styles: Fabric.IStyleFunction<Fabric.IBasePickerStyleProps, Fabric.IBasePickerStyles> | Partial<Fabric.IBasePickerStyles> | undefined,\r\n    onAddItem: (item: IItemDefinition) => void,\r\n    hiddenItems?: string[],\r\n}> = props => {\r\n    return (\r\n        <Fabric.TagPicker\r\n            searchingText=\"Searching...\"\r\n            styles={props.styles}\r\n            onValidateInput={input => Fabric.ValidationState.valid}\r\n            onResolveSuggestions={filter => {\r\n                let items = LookupItems(filter).filter(i => {\r\n                    if (props.hiddenItems && props.hiddenItems.some(hiddenName => hiddenName == i.name)) {\r\n                        return false;\r\n                    }\r\n\r\n                    return true;\r\n                }).map(i => {\r\n                    var tag: Fabric.ITag = {\r\n                        key: i.name,\r\n                        name: i.name,\r\n                    }\r\n\r\n                    return tag;\r\n                });\r\n\r\n                if (filter && filter.length) {\r\n                    items = items.concat({ key: filter, name: filter });\r\n                }\r\n\r\n                return items;\r\n            }}\r\n            onItemSelected={selectedItem => {\r\n                if (selectedItem) {\r\n                    let definedItem = GetItem(selectedItem.name);\r\n\r\n                    props.onAddItem(definedItem || {\r\n                        name: selectedItem.name,\r\n                        category: \"Other\"\r\n                    });\r\n                }\r\n\r\n                return null;\r\n            }}\r\n        />\r\n    );\r\n}","import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\nimport { FlexRow } from './flexrow';\r\n\r\nexport const HeaderRow: React.FC<{ text: string }> = props => {\r\n    return (\r\n        <FlexRow style={{\r\n            fontWeight: 500,\r\n            fontSize: \"150%\",\r\n        }}>\r\n            {props.text}\r\n        </FlexRow>\r\n    );\r\n}","import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\nimport { ICategoryItem } from '../models/models';\r\nimport { Category } from '../models/items';\r\nimport { HeaderRow } from './headerrow';\r\n\r\nexport interface ICategoryListProps<T> {\r\n    items: T[],\r\n    renderItem: (item: T, index: number) => JSX.Element,\r\n}\r\n\r\nexport class CategoryList<T extends ICategoryItem> extends React.Component<ICategoryListProps<T>> {\r\n    render() {\r\n        // sort the items by category, and add a title when it changes!\r\n        const sortedItems = this.props.items.sort((a, b) => {\r\n            const aCat = a.category || \"Other\";\r\n            const bCat = b.category || \"Other\";\r\n            if (aCat < bCat) {\r\n                return -1;\r\n            }\r\n            if (aCat == bCat) {\r\n                return 0;\r\n            }\r\n\r\n            return 1;\r\n        });\r\n\r\n        const items: JSX.Element[] = [];\r\n        let lastCat: Category | undefined = undefined;\r\n        console.log(sortedItems);\r\n        sortedItems.forEach((item, index) => {\r\n            if (lastCat != item.category) {\r\n                lastCat = item.category;\r\n                items.push(<HeaderRow text={lastCat || \"Other\"} key={lastCat} />);\r\n            }\r\n\r\n            items.push(this.props.renderItem(item, index));\r\n        });\r\n\r\n        return <div style={{overflowY: \"auto\"}}>{items}</div>;\r\n    }\r\n}","import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\nimport { FlexRow } from './flexrow';\r\n\r\nexport const ActionList: React.FC<{ actions: React.ReactNode[], list: React.ReactNode[] }> = props => {\r\n    return (\r\n        <>\r\n            {props.list}\r\n            <FlexRow style={{ flex: \"none\", paddingBottom: \"30px\" }}>\r\n                {props.actions}\r\n            </FlexRow>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\nimport { FlexRow } from './flexrow';\r\nimport { IShoppingItem, IItemDefinition } from '../models/models';\r\nimport { ItemPicker } from './itemPicker';\r\nimport { CategoryList } from './categorylist';\r\nimport { ActionList } from './actionlist';\r\n\r\ntype ShoppingListProps = {\r\n    onComplete: () => void;\r\n    shoppingList: IShoppingItem[];\r\n    setShoppingList: React.Dispatch<React.SetStateAction<IShoppingItem[]>>;\r\n};\r\n\r\nexport const ShoppingList: React.FC<ShoppingListProps> = props => {\r\n    const AddItem = (item: IItemDefinition) => {\r\n        props.setShoppingList([...props.shoppingList, { name: item.name, category: item.category, purchased: false }]);\r\n    }\r\n\r\n    const DeleteItem = (index: number) => {\r\n        let newList = [...props.shoppingList];\r\n        newList.splice(index, 1);\r\n        props.setShoppingList(newList);\r\n    }\r\n\r\n    const PurchaseItem = (index: number, purchased: boolean) => {\r\n        let newList = [...props.shoppingList];\r\n        newList[index] = { ...newList[index], purchased };\r\n        props.setShoppingList(newList);\r\n    }\r\n\r\n    let margin = \"0 5px\";\r\n\r\n    return (\r\n        <ActionList\r\n            list={[\r\n                <CategoryList\r\n                    items={props.shoppingList}\r\n                    renderItem={(item, index) => <FlexRow>\r\n                        <Fabric.Checkbox\r\n                            label={item.name}\r\n                            checked={item.purchased}\r\n                            onChange={(ev, checked) => {\r\n                                PurchaseItem(index, checked || false);\r\n                            }}\r\n                        />\r\n                        <Fabric.IconButton\r\n                            style={{ marginLeft: \"auto\" }}\r\n                            iconProps={{ iconName: \"Delete\" }}\r\n                            onClick={() => { DeleteItem(index); }}\r\n                        />\r\n                    </FlexRow>}\r\n                />,\r\n                !props.shoppingList || !props.shoppingList.length\r\n                    ? <FlexRow style={{ justifyContent: \"center\", fontWeight: 300 }}>Get started by adding some items to your shopping list!</FlexRow>\r\n                    : null\r\n            ]}\r\n\r\n            actions={[\r\n                <ItemPicker\r\n                    styles={{ root: { minWidth: \"200px\", width: \"50%\", margin, marginLeft: \"auto\" } }}\r\n                    onAddItem={AddItem}\r\n                    hiddenItems={props.shoppingList.map(s => s.name)}\r\n                />,\r\n                <Fabric.DefaultButton\r\n                    style={{ margin, marginRight: \"auto\" }}\r\n                    text=\"Trip Complete\"\r\n                    iconProps={{ iconName: \"ShoppingCart\" }}\r\n                    onClick={props.onComplete}\r\n                    disabled={props.shoppingList.length < 1 || !props.shoppingList.some(i => i.purchased)}\r\n                />\r\n            ]}\r\n        />\r\n    );\r\n}","import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\nimport { FlexRow } from './flexrow';\r\nimport { IMenuItem, View } from '../App';\r\n\r\nexport const MenuBar: React.FC<{ open?: boolean, menuItems: IMenuItem[], setView: React.Dispatch<React.SetStateAction<View>> }> = props => {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const style = { borderBottom: \"1px solid lightgrey\" };\r\n\r\n    return (\r\n        <FlexRow column={true}>\r\n            {props.open || open\r\n                ?\r\n                <>\r\n                    {props.open ? null : <FlexRow style={style}>\r\n                        <Fabric.IconButton iconProps={{ iconName: \"CollapseMenu\" }} onClick={() => setOpen(false)} />\r\n                    </FlexRow>}\r\n                    {props.menuItems.map(item =>\r\n                        <FlexRow style={style}>\r\n                            <Fabric.ActionButton\r\n                                iconProps={{ iconName: item.icon }}\r\n                                text={item.key}\r\n                                onClick={() => {\r\n                                    setOpen(false);\r\n                                    props.setView(item.key);\r\n                                }}\r\n                            />\r\n                        </FlexRow>\r\n                    )}\r\n                </>\r\n                : <FlexRow style={style}>\r\n                    <Fabric.IconButton iconProps={{ iconName: \"CollapseMenu\" }} onClick={() => setOpen(true)} />\r\n                </FlexRow>\r\n            }\r\n        </FlexRow>\r\n    );\r\n}","import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\nimport { FlexRow } from './flexrow';\r\nimport { IShoppingItem, IFridgeItem, IItemDefinition } from '../models/models';\r\nimport { ItemPicker } from './itemPicker';\r\nimport { CategoryList } from './categorylist';\r\nimport { ActionList } from './actionlist';\r\n\r\ntype FridgeListProps = {\r\n    fridgeList: IFridgeItem[];\r\n    setFridgeList: React.Dispatch<React.SetStateAction<IFridgeItem[]>>;\r\n};\r\n\r\nexport const FridgeList: React.FC<FridgeListProps> = props => {\r\n    const [date, setDate] = React.useState(new Date());\r\n\r\n    const AddItem = (item: IItemDefinition) => {\r\n        let expires = new Date(date);\r\n        expires.setDate(expires.getDate() + (item.expirationLenth || 7));\r\n        props.setFridgeList([...props.fridgeList, { name: item.name, category: item.category, purchased: date, status: \"Fresh\", expires }]);\r\n    }\r\n\r\n    const DeleteItem = (index: number) => {\r\n        let newList = [...props.fridgeList];\r\n        newList.splice(index, 1);\r\n        props.setFridgeList(newList);\r\n    }\r\n\r\n    let margin = \"0 5px\";\r\n\r\n    return (\r\n        <ActionList\r\n            list={[\r\n                <CategoryList\r\n                    items={props.fridgeList}\r\n                    renderItem={(item, index) => <FlexRow>\r\n                        <div>{item.name}</div>\r\n                        <div style={{ color: \"darkgrey\", margin: \"0 10px\", marginLeft: \"auto\", fontSize: \"80%\", fontStyle: \"italic\" }}>\r\n                            Expires {new Date(item.expires).toLocaleDateString(\"default\", { weekday: \"long\", day: \"numeric\", month: \"numeric\" })}\r\n                        </div>\r\n                        <Fabric.IconButton\r\n                            style={{ marginLeft: undefined }}\r\n                            iconProps={{ iconName: \"Delete\" }}\r\n                            onClick={() => { DeleteItem(index); }}\r\n                        />\r\n                    </FlexRow>}\r\n                />,\r\n                !props.fridgeList || !props.fridgeList.length\r\n                    ? <FlexRow style={{ justifyContent: \"center\", fontWeight: 300 }}>Get started by adding some items to your fridge!</FlexRow>\r\n                    : null\r\n            ]}\r\n\r\n            actions={[\r\n                <ItemPicker\r\n                    styles={{ root: { minWidth: \"200px\", width: \"50%\", margin, marginLeft: \"auto\" } }}\r\n                    onAddItem={AddItem}\r\n                />,\r\n                <Fabric.DatePicker\r\n                    style={{ margin, marginRight: \"auto\" }}\r\n                    value={date}\r\n                    onSelectDate={newDate => newDate && setDate(newDate)}\r\n                />]}\r\n        />\r\n    );\r\n}","import React from 'react';\nimport * as Fabric from 'office-ui-fabric-react';\nimport { ShoppingList } from './components/shoppinglist';\nimport { MenuBar } from './components/menubar';\nimport { FlexRow } from './components/flexrow';\nimport { HeaderRow } from './components/headerrow';\nimport { IShoppingItem, IFridgeItem, ItemStatus } from './models/models';\nimport { FridgeList } from './components/fridgelist';\nimport { GetItem } from './models/items';\n\nexport type View = \"Menu\" | \"Shop\" | \"Fridge\" | \"Cook\";\n\nexport interface IMenuItem {\n  key: View;\n  icon?: string;\n}\n\nconst savedView = localStorage.getItem(\"view-state\") || \"Shop\";\nconst savedShoppingList = localStorage.getItem(\"shopping-list\") || \"[]\";\nconst savedFridgeList = localStorage.getItem(\"fridge-list\") || \"[]\";\n\nconst App: React.FC = () => {\n  const [view, setView] = React.useState<View>(savedView as View);\n  const [shoppingList, setShoppingList] = React.useState<IShoppingItem[]>(JSON.parse(savedShoppingList));\n  const [fridgeList, setFridgeList] = React.useState<IFridgeItem[]>(JSON.parse(savedFridgeList));\n\n  // if state has changed save it locally!\n  localStorage.setItem(\"view-state\", view);\n  localStorage.setItem(\"shopping-list\", JSON.stringify(shoppingList));\n  localStorage.setItem(\"fridge-list\", JSON.stringify(fridgeList));\n\n  const menuItems: IMenuItem[] = [\n    { key: \"Shop\", icon: \"ShoppingCart\" },\n    { key: \"Fridge\", icon: \"Door\" },\n    // TODO: { key: \"Cook\", icon: \"EatDrink\" },\n  ];\n\n  let content = null;\n  switch (view) {\n    case \"Shop\":\n      content = <ShoppingList\n        shoppingList={shoppingList}\n        setShoppingList={setShoppingList}\n        onComplete={() => {\n          setFridgeList([\n            ...fridgeList,\n            ...shoppingList.filter(s => s.purchased).map(\n              shoppingItem => {\n                const def = GetItem(shoppingItem.name);\n                let expirationLength = 7;\n                let status: ItemStatus = \"Fresh\";\n                if (def && def.expirationLenth) {\n                  expirationLength = def.expirationLenth;\n                }\n                if (def && def.unopenedExpirationLength) {\n                  status = \"Unopened\";\n                }\n\n                let purchased = new Date();\n                let expires = new Date();\n                expires.setDate(purchased.getDate() + expirationLength);\n                const fridgeItem: IFridgeItem = {\n                  name: shoppingItem.name,\n                  category: shoppingItem.category,\n                  purchased,\n                  expires,\n                  status,\n                };\n\n                return fridgeItem;\n              }\n            )]);\n\n          setShoppingList([]);\n          setView(\"Fridge\");\n        }}\n      />;\n      break;\n    case \"Fridge\":\n      content = <FridgeList\n        fridgeList={fridgeList}\n        setFridgeList={setFridgeList}\n      />;\n      break;\n  }\n\n  return <FlexRow column style={{ height: \"100%\", width: \"100%\", position: \"absolute\" }}>\n    <MenuBar menuItems={menuItems} setView={setView} open={!content} />\n    {content ? <HeaderRow text={view} /> : null}\n    {content}\n  </FlexRow>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { initializeIcons } from '@uifabric/icons';\r\ninitializeIcons();\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}