{"version":3,"sources":["components/flexrow.tsx","models/items.ts","components/itemPicker.tsx","components/shoppinglist.tsx","components/menubar.tsx","components/headerrow.tsx","components/fridgelist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FlexRow","props","react_default","a","createElement","style","Object","objectSpread","display","alignItems","column","undefined","padding","flexDirection","flex","fill","children","Items","name","category","expirationLenth","unopenedExpirationLength","ItemPicker","TagPicker","searchingText","styles","onValidateInput","input","Fabric","valid","onResolveSuggestions","filter","partialName","items","item","toLowerCase","includes","map","i","key","length","concat","onItemSelected","selectedItem","definedItem","fullName","find","onAddItem","ShoppingList","Fragment","shoppingList","index","flexrow_FlexRow","Checkbox","label","checked","purchased","onChange","ev","newList","toConsumableArray","setShoppingList","PurchaseItem","IconButton","marginLeft","iconProps","iconName","onClick","splice","DeleteItem","justifyContent","fontWeight","itemPicker_ItemPicker","root","minWidth","width","margin","DefaultButton","marginRight","text","onComplete","disabled","some","MenuBar","_React$useState","React","useState","_React$useState2","slicedToArray","open","setOpen","borderBottom","menuItems","ActionButton","icon","setView","HeaderRow","fontSize","FridgeList","Date","date","setDate","fridgeList","color","fontStyle","expires","toLocaleDateString","weekday","day","month","setFridgeList","DatePicker","value","onSelectDate","newDate","getDate","status","savedView","localStorage","getItem","savedShoppingList","savedFridgeList","App","view","_React$useState3","JSON","parse","_React$useState4","_React$useState5","_React$useState6","setItem","stringify","content","shoppinglist_ShoppingList","s","shoppingItem","fridgelist_FridgeList","menubar_MenuBar","headerrow_HeaderRow","Boolean","window","location","hostname","match","initializeIcons","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03c305af.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\n\r\nexport const FlexRow: React.FC<{ fill?: boolean, column?: boolean, style?: any }> = props => {\r\n    return (\r\n        <div style={{\r\n            display: \"flex\",\r\n            alignItems: props.column ? undefined : \"center\",\r\n            padding: props.column ? undefined : \"10px\",\r\n            flexDirection: props.column ? \"column\" : \"row\",\r\n            flex: props.fill ? \"auto\" : \"none\",\r\n            ...props.style\r\n        }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}","import { IItemDefinition } from \"./models\";\r\n\r\nexport const LookupItems = (partialName: string): IItemDefinition[] => Items.filter(item => item.name.toLowerCase().includes(partialName.toLowerCase()));\r\n\r\nexport const GetItem = (fullName: string): IItemDefinition | undefined => Items.find(item => item.name == fullName);\r\n\r\nexport const Items: IItemDefinition[] = [\r\n    {\r\n        name: \"Broccoli\",\r\n        category: \"Vegetable\",\r\n        expirationLenth: 5,\r\n    },\r\n    {\r\n        name: \"Lettuce\",\r\n        category: \"Vegetable\",\r\n        expirationLenth: 7,\r\n    },\r\n    {\r\n        name: \"Carrots\",\r\n        category: \"Vegetable\",\r\n        expirationLenth: 21,\r\n    },\r\n    {\r\n        name: \"Yogurt\",\r\n        category: \"Dairy\",\r\n        expirationLenth: 7,\r\n        unopenedExpirationLength: 21,\r\n    },\r\n    {\r\n        name: \"Greek Yogurt\",\r\n        category: \"Dairy\",\r\n        expirationLenth: 7,\r\n        unopenedExpirationLength: 21,\r\n    },\r\n];","import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\nimport { LookupItems, GetItem } from '../models/items';\r\nimport { IItemDefinition } from '../models/models';\r\n\r\nexport const ItemPicker: React.FC<{\r\n    styles: Fabric.IStyleFunction<Fabric.IBasePickerStyleProps, Fabric.IBasePickerStyles> | Partial<Fabric.IBasePickerStyles> | undefined,\r\n    onAddItem: (item: IItemDefinition) => void,\r\n}> = props => {\r\n    return (\r\n        <Fabric.TagPicker\r\n            searchingText=\"Searching...\"\r\n            styles={props.styles}\r\n            onValidateInput={input => Fabric.ValidationState.valid}\r\n            onResolveSuggestions={filter => {\r\n                let items = LookupItems(filter).map(i => {\r\n                    var tag: Fabric.ITag = {\r\n                        key: i.name,\r\n                        name: i.name,\r\n                    }\r\n\r\n                    return tag;\r\n                });\r\n\r\n                if (filter && filter.length) {\r\n                    items = items.concat({ key: filter, name: filter });\r\n                }\r\n\r\n                return items;\r\n            }}\r\n            onItemSelected={selectedItem => {\r\n                if (selectedItem) {\r\n                    let definedItem = GetItem(selectedItem.name);\r\n\r\n                    props.onAddItem(definedItem || {\r\n                        name: selectedItem.name,\r\n                        category: \"Other\",\r\n                        expirationLenth: 7\r\n                    });\r\n                }\r\n\r\n                return null;\r\n            }}\r\n        />\r\n    );\r\n}","import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\nimport { FlexRow } from './flexrow';\r\nimport { IShoppingItem, IItemDefinition } from '../models/models';\r\nimport { ItemPicker } from './itemPicker';\r\n\r\ntype ShoppingListProps = {\r\n    onComplete: () => void;\r\n    shoppingList: IShoppingItem[];\r\n    setShoppingList: React.Dispatch<React.SetStateAction<IShoppingItem[]>>;\r\n};\r\n\r\nexport const ShoppingList: React.FC<ShoppingListProps> = props => {\r\n    const AddItem = (item: IItemDefinition) => {\r\n        props.setShoppingList([...props.shoppingList, { name: item.name, purchased: false }]);\r\n    }\r\n\r\n    const DeleteItem = (index: number) => {\r\n        let newList = [...props.shoppingList];\r\n        newList.splice(index, 1);\r\n        props.setShoppingList(newList);\r\n    }\r\n\r\n    const PurchaseItem = (index: number, purchased: boolean) => {\r\n        let newList = [...props.shoppingList];\r\n        newList[index] = { ...newList[index], purchased };\r\n        props.setShoppingList(newList);\r\n    }\r\n\r\n    let margin = \"0 5px\";\r\n\r\n    return (\r\n        <>\r\n            {props.shoppingList.map((item, index) =>\r\n                <FlexRow>\r\n                    <Fabric.Checkbox\r\n                        label={item.name}\r\n                        checked={item.purchased}\r\n                        onChange={(ev, checked) => {\r\n                            PurchaseItem(index, checked || false);\r\n                        }}\r\n                    />\r\n                    <Fabric.IconButton\r\n                        style={{ marginLeft: \"auto\" }}\r\n                        iconProps={{ iconName: \"Delete\" }}\r\n                        onClick={() => { DeleteItem(index); }}\r\n                    />\r\n                </FlexRow>\r\n            )}\r\n\r\n            {!props.shoppingList || !props.shoppingList.length\r\n                ? <FlexRow style={{ justifyContent: \"center\", fontWeight: 300 }}>Get started by adding some items to your shopping list!</FlexRow>\r\n                : null}\r\n\r\n            <FlexRow>\r\n                <ItemPicker\r\n                    styles={{ root: { minWidth: \"200px\", width: \"50%\", margin, marginLeft: \"auto\" } }}\r\n                    onAddItem={AddItem}\r\n                />\r\n                <Fabric.DefaultButton\r\n                    style={{ margin, marginRight: \"auto\" }}\r\n                    text=\"Trip Complete\"\r\n                    iconProps={{ iconName: \"ShoppingCart\" }}\r\n                    onClick={props.onComplete}\r\n                    disabled={props.shoppingList.length < 1 || !props.shoppingList.some(i => i.purchased)}\r\n                />\r\n            </FlexRow>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\nimport { FlexRow } from './flexrow';\r\nimport { IMenuItem, View } from '../App';\r\n\r\nexport const MenuBar: React.FC<{ open?: boolean, menuItems: IMenuItem[], setView: React.Dispatch<React.SetStateAction<View>> }> = props => {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const style = { borderBottom: \"1px solid lightgrey\" };\r\n\r\n    return (\r\n        <FlexRow column={true}>\r\n            {props.open || open\r\n                ?\r\n                <>\r\n                    {props.open ? null : <FlexRow style={style}>\r\n                        <Fabric.IconButton iconProps={{ iconName: \"CollapseMenu\" }} onClick={() => setOpen(false)} />\r\n                    </FlexRow>}\r\n                    {props.menuItems.map(item =>\r\n                        <FlexRow style={style}>\r\n                            <Fabric.ActionButton\r\n                                iconProps={{ iconName: item.icon }}\r\n                                text={item.key}\r\n                                onClick={() => {\r\n                                    setOpen(false);\r\n                                    props.setView(item.key);\r\n                                }}\r\n                            />\r\n                        </FlexRow>\r\n                    )}\r\n                </>\r\n                : <FlexRow style={style}>\r\n                    <Fabric.IconButton iconProps={{ iconName: \"CollapseMenu\" }} onClick={() => setOpen(true)} />\r\n                </FlexRow>\r\n            }\r\n        </FlexRow>\r\n    );\r\n}","import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\nimport { FlexRow } from './flexrow';\r\n\r\nexport const HeaderRow: React.FC<{ text: string }> = props => {\r\n    return (\r\n        <FlexRow style={{\r\n            fontWeight: 500,\r\n            fontSize: \"150%\",\r\n        }}>\r\n            {props.text}\r\n        </FlexRow>\r\n    );\r\n}","import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\nimport { FlexRow } from './flexrow';\r\nimport { IShoppingItem, IFridgeItem, IItemDefinition } from '../models/models';\r\nimport { ItemPicker } from './itemPicker';\r\n\r\ntype FridgeListProps = {\r\n    fridgeList: IFridgeItem[];\r\n    setFridgeList: React.Dispatch<React.SetStateAction<IFridgeItem[]>>;\r\n};\r\n\r\nexport const FridgeList: React.FC<FridgeListProps> = props => {\r\n    const [date, setDate] = React.useState(new Date());\r\n\r\n    const AddItem = (item: IItemDefinition) => {\r\n        let expires = new Date(date);\r\n        expires.setDate(expires.getDate() + item.expirationLenth);\r\n        props.setFridgeList([...props.fridgeList, { name: item.name, purchased: date, status: \"Fresh\", expires }]);\r\n    }\r\n\r\n    const DeleteItem = (index: number) => {\r\n        let newList = [...props.fridgeList];\r\n        newList.splice(index, 1);\r\n        props.setFridgeList(newList);\r\n    }\r\n\r\n    let margin = \"0 5px\";\r\n\r\n    return (\r\n        <>\r\n            {props.fridgeList.map((item, index) =>\r\n                <FlexRow>\r\n                    <div>{item.name}</div>\r\n                    <div style={{ color: \"darkgrey\", margin: \"0 10px\", marginLeft: \"auto\", fontSize: \"80%\", fontStyle: \"italic\" }}>\r\n                        Expires {new Date(item.expires).toLocaleDateString(\"default\", { weekday: \"long\", day: \"numeric\", month: \"numeric\" })}\r\n                    </div>\r\n                    <Fabric.IconButton\r\n                        style={{ marginLeft: undefined }}\r\n                        iconProps={{ iconName: \"Delete\" }}\r\n                        onClick={() => { DeleteItem(index); }}\r\n                    />\r\n                </FlexRow>\r\n            )}\r\n\r\n            {!props.fridgeList || !props.fridgeList.length\r\n                ? <FlexRow style={{ justifyContent: \"center\", fontWeight: 300 }}>Get started by adding some items to your fridge!</FlexRow>\r\n                : null}\r\n\r\n            <FlexRow style={{ justifyContent: \"space-between\" }}>\r\n                <Fabric.DatePicker\r\n                    style={{ margin, marginLeft: \"auto\" }}\r\n                    value={date}\r\n                    onSelectDate={newDate => newDate && setDate(newDate)}\r\n                />\r\n                <ItemPicker\r\n                    styles={{ root: { minWidth: \"200px\", width: \"50%\", margin, marginRight: \"auto\" } }}\r\n                    onAddItem={AddItem}\r\n                />\r\n            </FlexRow>\r\n        </>\r\n    );\r\n}","import React from 'react';\nimport * as Fabric from 'office-ui-fabric-react';\nimport { ShoppingList } from './components/shoppinglist';\nimport { MenuBar } from './components/menubar';\nimport { FlexRow } from './components/flexrow';\nimport { HeaderRow } from './components/headerrow';\nimport { IShoppingItem, IFridgeItem } from './models/models';\nimport { FridgeList } from './components/fridgelist';\n\nexport type View = \"Menu\" | \"Shop\" | \"Fridge\" | \"Cook\";\n\nexport interface IMenuItem {\n  key: View;\n  icon?: string;\n}\n\nconst savedView = localStorage.getItem(\"view-state\") || \"Shop\";\nconst savedShoppingList = localStorage.getItem(\"shopping-list\") || \"[]\";\nconst savedFridgeList = localStorage.getItem(\"fridge-list\") || \"[]\";\n\nconst App: React.FC = () => {\n  const [view, setView] = React.useState<View>(savedView as View);\n  const [shoppingList, setShoppingList] = React.useState<IShoppingItem[]>(JSON.parse(savedShoppingList));\n  const [fridgeList, setFridgeList] = React.useState<IFridgeItem[]>(JSON.parse(savedFridgeList));\n\n  // if state has changed save it locally!\n  localStorage.setItem(\"view-state\", view);\n  localStorage.setItem(\"shopping-list\", JSON.stringify(shoppingList));\n  localStorage.setItem(\"fridge-list\", JSON.stringify(fridgeList));\n\n  const menuItems: IMenuItem[] = [\n    { key: \"Shop\", icon: \"ShoppingCart\" },\n    { key: \"Fridge\", icon: \"Door\" },\n    { key: \"Cook\", icon: \"EatDrink\" },\n  ];\n\n  let content = null;\n  switch (view) {\n    case \"Shop\":\n      content = <ShoppingList\n        shoppingList={shoppingList}\n        setShoppingList={setShoppingList}\n        onComplete={() => {\n          setFridgeList([\n            ...fridgeList,\n            ...shoppingList.filter(s => s.purchased).map(\n              shoppingItem => {\n                let purchased = new Date();\n                let expires = new Date();\n                expires.setDate(purchased.getDate() + 7);\n                const fridgeItem: IFridgeItem = {\n                  name: shoppingItem.name,\n                  purchased,\n                  expires,\n                  status: \"Fresh\"\n                };\n\n                return fridgeItem;\n              }\n            )]);\n\n            setShoppingList([]);\n            setView(\"Fridge\");\n        }}\n      />;\n      break;\n    case \"Fridge\":\n      content = <FridgeList\n        fridgeList={fridgeList}\n        setFridgeList={setFridgeList}\n      />;\n      break;\n  }\n\n  return <FlexRow column>\n    <MenuBar menuItems={menuItems} setView={setView} open={!content} />\n    {content ? <HeaderRow text={view} /> : null}\n    {content}\n  </FlexRow>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { initializeIcons } from '@uifabric/icons';\r\ninitializeIcons();\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}