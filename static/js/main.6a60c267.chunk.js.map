{"version":3,"sources":["components/flexrow.tsx","components/shoppinglist.tsx","components/menubar.tsx","components/headerrow.tsx","components/fridgelist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FlexRow","props","react_default","a","createElement","style","Object","objectSpread","display","alignItems","column","undefined","padding","flexDirection","flex","fill","children","ShoppingList","_React$useState","React","useState","_React$useState2","slicedToArray","text","setText","Fragment","shoppingList","map","item","index","flexrow_FlexRow","Checkbox","label","name","checked","purchased","onChange","ev","newList","toConsumableArray","setShoppingList","PurchaseItem","IconButton","marginLeft","iconProps","iconName","onClick","splice","DeleteItem","length","justifyContent","TextField","styles","root","minWidth","width","value","e","newValue","PrimaryButton","concat","disabled","DefaultButton","onComplete","some","i","MenuBar","open","setOpen","borderBottom","menuItems","ActionButton","icon","key","setView","HeaderRow","fontWeight","fontSize","FridgeList","_React$useState3","Date","_React$useState4","date","setDate","fridgeList","color","margin","fontStyle","expires","toLocaleDateString","weekday","day","month","setFridgeList","DatePicker","onSelectDate","newDate","getDate","status","savedView","localStorage","getItem","savedShoppingList","savedFridgeList","App","view","useCallback","JSON","parse","_React$useState5","_React$useState6","setItem","stringify","content","shoppinglist_ShoppingList","filter","s","shoppingItem","fridgelist_FridgeList","menubar_MenuBar","headerrow_HeaderRow","Boolean","window","location","hostname","match","initializeIcons","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a60c267.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\n\r\nexport const FlexRow: React.FC<{ fill?: boolean, column?: boolean, style?: any }> = props => {\r\n    return (\r\n        <div style={{\r\n            display: \"flex\",\r\n            alignItems: props.column ? undefined : \"center\",\r\n            padding: props.column ? undefined : \"10px\",\r\n            flexDirection: props.column ? \"column\" : \"row\",\r\n            flex: props.fill ? \"auto\" : \"none\",\r\n            ...props.style\r\n        }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\nimport { FlexRow } from './flexrow';\r\nimport { IShoppingItem } from '../models/models';\r\n\r\ntype ShoppingListProps = {\r\n    onComplete: () => void;\r\n    shoppingList: IShoppingItem[];\r\n    setShoppingList: React.Dispatch<React.SetStateAction<IShoppingItem[]>>;\r\n};\r\n\r\nexport const ShoppingList: React.FC<ShoppingListProps> = props => {\r\n    const [text, setText] = React.useState(\"\");\r\n\r\n    // TODO: not sure if these are good candidates for useCallback or useMemo\r\n    const AddItem = () => {\r\n        props.setShoppingList([...props.shoppingList, { name: text, purchased: false }]);\r\n        setText(\"\");\r\n    }\r\n\r\n    const DeleteItem = (index: number) => {\r\n        let newList = [...props.shoppingList];\r\n        newList.splice(index, 1);\r\n        props.setShoppingList(newList);\r\n    }\r\n\r\n    const PurchaseItem = (index: number, purchased: boolean) => {\r\n        let newList = [...props.shoppingList];\r\n        newList[index] = { ...newList[index], purchased };\r\n        props.setShoppingList(newList);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {props.shoppingList.map((item, index) =>\r\n                <FlexRow>\r\n                    <Fabric.Checkbox\r\n                        label={item.name}\r\n                        checked={item.purchased}\r\n                        onChange={(ev, checked) => {\r\n                            PurchaseItem(index, checked || false);\r\n                        }}\r\n                    />\r\n                    <Fabric.IconButton\r\n                        style={{ marginLeft: \"auto\" }}\r\n                        iconProps={{ iconName: \"Delete\" }}\r\n                        onClick={() => { DeleteItem(index); }}\r\n                    />\r\n                </FlexRow>\r\n            )}\r\n\r\n            {!props.shoppingList || !props.shoppingList.length\r\n                ? <FlexRow style={{justifyContent: \"center\"}}>Get started by adding some items to your shopping list!</FlexRow>\r\n                : null}\r\n\r\n            <FlexRow style={{ justifyContent: \"space-between\" }}>\r\n                <Fabric.TextField\r\n                    styles={{ root: { minWidth: \"200px\", width: \"50%\" } }}\r\n                    value={text}\r\n                    onChange={(e, newValue) => setText(newValue || \"\")}\r\n                />\r\n                <Fabric.PrimaryButton\r\n                    text=\"Add item\"\r\n                    iconProps={{ iconName: \"Add\" }}\r\n                    onClick={AddItem}\r\n                    disabled={!text}\r\n                />\r\n                <Fabric.DefaultButton\r\n                    text=\"Trip Complete\"\r\n                    iconProps={{ iconName: \"ShoppingCart\" }}\r\n                    onClick={props.onComplete}\r\n                    disabled={props.shoppingList.length < 1 || !props.shoppingList.some(i => i.purchased)}\r\n                />\r\n            </FlexRow>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\nimport { FlexRow } from './flexrow';\r\nimport { IMenuItem, View } from '../App';\r\n\r\nexport const MenuBar: React.FC<{ open?: boolean, menuItems: IMenuItem[], setView: React.Dispatch<React.SetStateAction<View>> }> = props => {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const style = { borderBottom: \"1px solid lightgrey\" };\r\n\r\n    return (\r\n        <FlexRow column={true}>\r\n            {props.open || open\r\n                ?\r\n                <>\r\n                    {props.open ? null : <FlexRow style={style}>\r\n                        <Fabric.IconButton iconProps={{ iconName: \"CollapseMenu\" }} onClick={() => setOpen(false)} />\r\n                    </FlexRow>}\r\n                    {props.menuItems.map(item =>\r\n                        <FlexRow style={style}>\r\n                            <Fabric.ActionButton\r\n                                iconProps={{ iconName: item.icon }}\r\n                                text={item.key}\r\n                                onClick={() => {\r\n                                    setOpen(false);\r\n                                    props.setView(item.key);\r\n                                }}\r\n                            />\r\n                        </FlexRow>\r\n                    )}\r\n                </>\r\n                : <FlexRow style={style}>\r\n                    <Fabric.IconButton iconProps={{ iconName: \"CollapseMenu\" }} onClick={() => setOpen(true)} />\r\n                </FlexRow>\r\n            }\r\n        </FlexRow>\r\n    );\r\n}","import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\nimport { FlexRow } from './flexrow';\r\n\r\nexport const HeaderRow: React.FC<{ text: string }> = props => {\r\n    return (\r\n        <FlexRow style={{\r\n            fontWeight: 500,\r\n            fontSize: \"150%\",\r\n        }}>\r\n            {props.text}\r\n        </FlexRow>\r\n    );\r\n}","import React from 'react';\r\nimport * as Fabric from 'office-ui-fabric-react';\r\nimport { FlexRow } from './flexrow';\r\nimport { IShoppingItem, IFridgeItem } from '../models/models';\r\n\r\ntype FridgeListProps = {\r\n    fridgeList: IFridgeItem[];\r\n    setFridgeList: React.Dispatch<React.SetStateAction<IFridgeItem[]>>;\r\n};\r\n\r\nexport const FridgeList: React.FC<FridgeListProps> = props => {\r\n    const [text, setText] = React.useState(\"\");\r\n    const [date, setDate] = React.useState(new Date());\r\n\r\n    // TODO: not sure if these are good candidates for useCallback or useMemo\r\n    const AddItem = () => {\r\n        let expires = new Date(date);\r\n        expires.setDate(expires.getDate() + 7);\r\n        props.setFridgeList([...props.fridgeList, { name: text, purchased: date, status: \"Fresh\", expires }]);\r\n        setText(\"\");\r\n    }\r\n\r\n    const DeleteItem = (index: number) => {\r\n        let newList = [...props.fridgeList];\r\n        newList.splice(index, 1);\r\n        props.setFridgeList(newList);\r\n    }\r\n\r\n    const OpenItem = (index: number, purchased: boolean) => {\r\n        let newList = [...props.fridgeList];\r\n        newList[index] = { ...newList[index], purchased: date };\r\n        props.setFridgeList(newList);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {props.fridgeList.map((item, index) =>\r\n                <FlexRow>\r\n                    <div>{item.name}</div>\r\n                    <div style={{ color: \"darkgrey\", margin: \"0 10px\", marginLeft: \"auto\", fontSize: \"80%\", fontStyle: \"italic\" }}>\r\n                        Expires {new Date(item.expires).toLocaleDateString(\"default\", { weekday: \"long\", day: \"numeric\", month: \"numeric\" })}\r\n                    </div>\r\n                    <Fabric.IconButton\r\n                        style={{ marginLeft: undefined }}\r\n                        iconProps={{ iconName: \"Delete\" }}\r\n                        onClick={() => { DeleteItem(index); }}\r\n                    />\r\n                </FlexRow>\r\n            )}\r\n\r\n            {!props.fridgeList || !props.fridgeList.length\r\n                ? <FlexRow style={{justifyContent: \"center\"}}>Get started by adding some items to your fridge!</FlexRow>\r\n                : null}\r\n\r\n            <FlexRow style={{ justifyContent: \"space-between\" }}>\r\n                <Fabric.DatePicker value={date} onSelectDate={newDate => newDate && setDate(newDate)} />\r\n                <Fabric.TextField value={text} onChange={(e, newValue) => setText(newValue || \"\")} />\r\n                <Fabric.PrimaryButton\r\n                    text=\"Add item\"\r\n                    iconProps={{ iconName: \"Add\" }}\r\n                    onClick={AddItem}\r\n                    disabled={!text}\r\n                />\r\n            </FlexRow>\r\n        </>\r\n    );\r\n}","import React from 'react';\nimport * as Fabric from 'office-ui-fabric-react';\nimport { ShoppingList } from './components/shoppinglist';\nimport { MenuBar } from './components/menubar';\nimport { FlexRow } from './components/flexrow';\nimport { HeaderRow } from './components/headerrow';\nimport { IShoppingItem, IFridgeItem } from './models/models';\nimport { FridgeList } from './components/fridgelist';\n\nexport type View = \"Menu\" | \"Shop\" | \"Fridge\" | \"Cook\";\n\nexport interface IMenuItem {\n  key: View;\n  icon?: string;\n}\n\nconst savedView = localStorage.getItem(\"view-state\") || \"Shop\";\nconst savedShoppingList = localStorage.getItem(\"shopping-list\") || \"[]\";\nconst savedFridgeList = localStorage.getItem(\"fridge-list\") || \"[]\";\n\nconst App: React.FC = () => {\n  const [view, setView] = React.useState<View>(savedView as View);\n\n  var x = React.useCallback\n\n  const [shoppingList, setShoppingList] = React.useState<IShoppingItem[]>(JSON.parse(savedShoppingList));\n  const [fridgeList, setFridgeList] = React.useState<IFridgeItem[]>(JSON.parse(savedFridgeList));\n\n  // if state has changed save it locally!\n  localStorage.setItem(\"view-state\", view);\n  localStorage.setItem(\"shopping-list\", JSON.stringify(shoppingList));\n  localStorage.setItem(\"fridge-list\", JSON.stringify(fridgeList));\n\n  const menuItems: IMenuItem[] = [\n    { key: \"Shop\", icon: \"ShoppingCart\" },\n    { key: \"Fridge\", icon: \"Door\" },\n    { key: \"Cook\", icon: \"EatDrink\" },\n  ];\n\n  let content = null;\n  switch (view) {\n    case \"Shop\":\n      content = <ShoppingList\n        shoppingList={shoppingList}\n        setShoppingList={setShoppingList}\n        onComplete={() => {\n          setFridgeList([\n            ...fridgeList,\n            ...shoppingList.filter(s => s.purchased).map(\n              shoppingItem => {\n                let purchased = new Date();\n                let expires = new Date();\n                expires.setDate(purchased.getDate() + 7);\n                const fridgeItem: IFridgeItem = {\n                  name: shoppingItem.name,\n                  purchased,\n                  expires,\n                  status: \"Fresh\"\n                };\n\n                return fridgeItem;\n              }\n            )]);\n\n            setShoppingList([]);\n        }}\n      />;\n      break;\n    case \"Fridge\":\n      content = <FridgeList\n        fridgeList={fridgeList}\n        setFridgeList={setFridgeList}\n      />;\n      break;\n  }\n\n  return <FlexRow column>\n    <MenuBar menuItems={menuItems} setView={setView} open={!content} />\n    {content ? <HeaderRow text={view} /> : null}\n    {content}\n  </FlexRow>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { initializeIcons } from '@uifabric/icons';\r\ninitializeIcons();\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}